## First question: When would you want to create a remote repository rather than keeping all your work local?

ANSWER: When other people will collaborate to that repo. Also, it's a safe backup for your code, not trusting that everything wil lbe hosted only in your machine.

### Second question: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

ANSWER: Because if it's a shared repo, people may commit stuff and it will automatically be pulled to your machine, inserting modifications that you don't want. This will get out of hand. 
By pulling manually, you will know the right moment when what's n github has to be merged to what you have on your local.

### Third question: Describe the differences between forks, clones, and branches. When would you use one instead of another?

ANSWER: Fork will "clone" a repo from github, where it was all original content but you can make changes without modifying the original repo. Clone copies a repo in your local. A branch is a new "folder" inside your local repo, with the original content, where you can make changes and then merge back to master.


### Fourth question: What is the benefit of having a copy of the last known state of the remote stored locally?

ANSWER: If you're collaborating and the latest modifications on remote will impact your code, it is important to keep your local updated.


### Fifth question: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

ANSWER: I think it would be much harder ans specially time consuming to collaborate without using Git and Github, since it would require an absurd level of management and control, as well as establishing a very good communication channel.


### Sixth question: When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

ANSWER: A separate branch allows you to experiment and make mistakes without breaking the whole code or interfering with other people's projects at the same time. When you merge, git shows you the conflicts so you can solve them in advance.